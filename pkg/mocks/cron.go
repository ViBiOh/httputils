// Code generated by MockGen. DO NOT EDIT.
// Source: cron.go
//
// Generated by this command:
//
//	mockgen -source cron.go -destination ../mocks/cron.go -package mocks -mock_names Semaphore=Semaphore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// Semaphore is a mock of Semaphore interface.
type Semaphore struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *SemaphoreMockRecorder
}

// SemaphoreMockRecorder is the mock recorder for Semaphore.
type SemaphoreMockRecorder struct {
	mock *Semaphore
}

// NewSemaphore creates a new mock instance.
func NewSemaphore(ctrl *gomock.Controller) *Semaphore {
	mock := &Semaphore{ctrl: ctrl}
	mock.recorder = &SemaphoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Semaphore) EXPECT() *SemaphoreMockRecorder {
	return m.recorder
}

// Exclusive mocks base method.
func (m *Semaphore) Exclusive(arg0 context.Context, arg1 string, arg2 time.Duration, arg3 func(context.Context) error) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exclusive", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exclusive indicates an expected call of Exclusive.
func (mr *SemaphoreMockRecorder) Exclusive(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exclusive", reflect.TypeOf((*Semaphore)(nil).Exclusive), arg0, arg1, arg2, arg3)
}
