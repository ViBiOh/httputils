// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ViBiOh/httputils/v4/pkg/cron (interfaces: Redis)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// Redis is a mock of Redis interface.
type Redis struct {
	ctrl     *gomock.Controller
	recorder *RedisMockRecorder
}

// RedisMockRecorder is the mock recorder for Redis.
type RedisMockRecorder struct {
	mock *Redis
}

// NewRedis creates a new mock instance.
func NewRedis(ctrl *gomock.Controller) *Redis {
	mock := &Redis{ctrl: ctrl}
	mock.recorder = &RedisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Redis) EXPECT() *RedisMockRecorder {
	return m.recorder
}

// Exclusive mocks base method.
func (m *Redis) Exclusive(arg0 context.Context, arg1 string, arg2 time.Duration, arg3 func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exclusive", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exclusive indicates an expected call of Exclusive.
func (mr *RedisMockRecorder) Exclusive(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exclusive", reflect.TypeOf((*Redis)(nil).Exclusive), arg0, arg1, arg2, arg3)
}

// Ping mocks base method.
func (m *Redis) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *RedisMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*Redis)(nil).Ping))
}
